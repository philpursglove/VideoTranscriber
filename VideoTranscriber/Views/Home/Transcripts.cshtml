@using VideoTranscriberCore
@model IEnumerable<VideoTranscriberCore.TranscriptionData>

@{
    ViewData["Title"] = "Transcripts";
}

<h1>Transcripts</h1>

<table class="table">
    <thead>
        <tr>
            <th>
                Project Name
            </th>
            <th>
                Source Language
            </th>
            <th>
                Original Filename
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Duration)
            </th>
            <th>
                Speakers
            </th>
            <th>
                @Html.DisplayNameFor(m => m.Confidence)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            if (item.TranscriptionStatus == TranscriptionStatus.Transcribed)
            {
                <tr>
                    <td>
                        @Html.ActionLink(@item.ProjectName, "TranscriptsForProject", new { projectName = item.ProjectName })
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Language)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OriginalFilename)
                    </td>
                    <td>
                        @{
                            TimeSpan duration = TimeSpan.FromSeconds(item.Duration);
                            @duration.ToString(@"hh\:mm\:ss")
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(m => item.SpeakerCount)
                    </td>
                    <td>
                        @{
                            var tooltipText = $"Range: {item.Transcript.Min(t => t.Confidence)} - {item.Transcript.Max(t => t.Confidence)}";
                        }
                        <span data-bs-toggle="tooltip" data-bs-title="@tooltipText" data-bs-placement="bottom">
                            @Html.DisplayFor(m => item.Confidence)
                        </span>
                    </td>
                    <td class="nav">
                        @Html.ActionLink("View Transcript", "ViewTranscript", new { videoId = item.id }, new {@class="nav-link"})
                        <div class="dropdown">
                            <a class="dropdown-toggle nav-link" data-bs-toggle="dropdown">Download</a>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="@Url.Action("DownloadWord", "Home", new { videoId = item.VideoId, includeTimestamps=false })">Word</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("DownloadWord", "Home", new { videoId = item.VideoId, includeTimestamps=true })">Word (with timestamps)</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="@Url.Action("DownloadTranscript", "Home", new { videoId = item.VideoId })">CSV</a></li>
                            </ul>
                        </div>
                    </td>
                </tr>
            }
            else
            {
                <tr>
                    <td>
                        @Html.ActionLink(@item.ProjectName, "TranscriptsForProject", new { projectName = item.ProjectName })
                    </td>
                    <td>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OriginalFilename)
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td>
                    </td>
                    <td>
                        @Html.DisplayFor(m => item.TranscriptionStatus)
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@section Scripts {
    <script language="javascript">
        var tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        var tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    </script>
}

